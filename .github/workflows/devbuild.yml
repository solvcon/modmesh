name: devbuild

on:
  push:
  pull_request:
  schedule:
    - cron: '34 17 * * *'

jobs:

  build_ubuntu:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    name: build_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      JOB_MAKE_ARGS: VERBOSE=1 BUILD_QT=ON USE_CLANG_TIDY=OFF
      QT_DEBUG_PLUGINS: 1
      QT_QPA_PLATFORM: offscreen

    strategy:
        matrix:
          # ubuntu-20.04 does not have built-in qt6
          os: [ubuntu-22.04]
          cmake_build_type: [Release]

        fail-fast: false

    steps:

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: event name
      run: |
        echo "github.event_name: ${{ github.event_name }}"

    - name: dependency by apt
      run: |
        sudo apt-get -qqy update
        sudo apt-get -qy install \
            sudo curl git build-essential make cmake libc6-dev gcc g++ \
            python3 python3-dev python3-venv
        # Install qt6 only with ubuntu-22.04
        # TODO: Not sure why libgl1-mesa-dev is needed. Without this package,
        # we do not make cmake navigate to the right path to get the qt lib.
        if [ "${{ matrix.os }}" == "ubuntu-22.04" ] ; then \
          sudo apt-get -qy install \
              qt6-3d-dev xvfb \
              libgl1-mesa-dev
        fi

    - name: dependency by pip
      run: |
        sudo pip3 install setuptools
        sudo pip3 install numpy pytest flake8

    - name: dependency by manual script
      run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

    - name: show dependency
      # Copy the commands from contrib/dependency/showdep.sh
      run: |
        echo "gcc path: $(which gcc)"
        echo "gcc version: $(gcc --version)"
        echo "cmake path: $(which cmake)"
        echo "cmake version: $(cmake --version)"
        echo "python3 path: $(which python3)"
        echo "python3 version: $(python3 --version)"
        echo "pip3 path: $(which pip3)"
        python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
        echo "pytest path: $(which pytest)"
        echo "pytest version: $(pytest --version)"
        echo "clang-tidy path: $(which clang-tidy)"
        echo "clang-tidy version: $(clang-tidy -version)"
        echo "flake8 path: $(which flake8)"
        echo "flake8 version: $(flake8 --version)"

    - name: make buildext
      run: |
        make buildext \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: make pytest
      run: |
        make pytest \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: make viewer
      run: |
        make viewer \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: make run_viewer_pytest
      run: |
        make run_viewer_pytest \
          ${JOB_MAKE_ARGS} \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

  build_macos:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    name: build_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      JOB_MAKE_ARGS: VERBOSE=1 BUILD_QT=ON USE_CLANG_TIDY=OFF
      QT_DEBUG_PLUGINS: 1

    strategy:
      matrix:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-11-Readme.md
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-12-Readme.md
        os: [macos-11, macos-12]
        cmake_build_type: [Release]

      fail-fast: false

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - name: dependency by homebrew
        run: |
          # brew update  # No update because it is slow
          # Force using python 3.10 from homebrew
          brew unlink python
          brew link --force --overwrite python@3.10
          brew install qt6

      - name: dependency by pip
        run: |
          echo "which python3: $(which python3)"
          ls -al $(which python3)
          python3 -m pip -v install --upgrade setuptools
          python3 -m pip -v install --upgrade pip
          python3 -m pip -v install --upgrade numpy pytest flake8

      - name: dependency by manual script
        run: |
          sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11
          if [ "${{ matrix.os }}" == "macos-12" ] ; then \
            thirdparty/metal-cpp.sh ; \
          fi

      - name: show dependency
        # Copy the commands from contrib/dependency/showdep.sh
        run: |
          echo "gcc path: $(which gcc)"
          echo "gcc version: $(gcc --version)"
          echo "cmake path: $(which cmake)"
          echo "cmake version: $(cmake --version)"
          echo "python3 path: $(which python3)"
          echo "python3 version: $(python3 --version)"
          echo "pip3 path: $(which pip3)"
          python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
          echo "pytest path: $(which pytest)"
          echo "pytest version: $(pytest --version)"
          echo "clang-tidy path: $(which clang-tidy)"
          echo "clang-tidy version: $(clang-tidy -version)"
          echo "flake8 path: $(which flake8)"
          echo "flake8 version: $(flake8 --version)"

      - name: make buildext
        run: |
          make buildext \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

      - name: make pytest
        run: |
          if [ "${{ matrix.os }}" == "macos-12" ] ; then \
            JOB_MAKE_ARGS="${JOB_MAKE_ARGS} BUILD_METAL=ON" ; \
          fi
          make pytest \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

      - name: make viewer
        run: |
          make viewer \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

      - name: make run_viewer_pytest
        run: |
          make run_viewer_pytest \
            ${JOB_MAKE_ARGS} \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

  build_windows:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    name: build_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      QT_DEBUG_PLUGINS: 1

    strategy:
      matrix:
        os: [windows-2022]
        # Build Debug because there is not a job for windows in lint.yml (which uses the Debug build type)
        cmake_build_type: [Release, Debug]

      fail-fast: false

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - uses: ilammy/msvc-dev-cmd@v1

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==2.1.*'
          version: '6.3.1'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: 'qt3d'

      - name: dependency by pip
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: pip3 install -U numpy pytest flake8 pybind11

      - name: show dependency
        run: |
          Get-Command cl
          Get-Command cmake
          Get-Command python3
          Get-Command pip3
          python3 -c "import numpy ; print('numpy.__version__:', numpy.__version__)"
          python3 -c "import pybind11 ; print('pybind11.__version__:', pybind11.__version__)"
          pybind11-config --cmakedir
          Get-Command pytest
          Get-Command clang-tidy
          Get-Command flake8

      - name: cmake ALL_BUILD
        run: |
          cmake `
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} `
            -Dpybind11_DIR="$(pybind11-config --cmakedir)" `
            -S${{ github.workspace }} `
            -B${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build `
            --config ${{ matrix.cmake_build_type }} `
            --target ALL_BUILD

      - name: cmake run_viewer_pytest
        run: |
          cmake --build ${{ github.workspace }}/build `
            --config ${{ matrix.cmake_build_type }} `
            --target run_viewer_pytest
